<?php

namespace Proxies\__CG__\AppBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Payload extends \AppBundle\Entity\Payload implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'AppBundle\\Entity\\Payload' . "\0" . 'id', '' . "\0" . 'AppBundle\\Entity\\Payload' . "\0" . 'ref', '' . "\0" . 'AppBundle\\Entity\\Payload' . "\0" . 'beforeSha', '' . "\0" . 'AppBundle\\Entity\\Payload' . "\0" . 'afterSha', '' . "\0" . 'AppBundle\\Entity\\Payload' . "\0" . 'created', '' . "\0" . 'AppBundle\\Entity\\Payload' . "\0" . 'deleted', '' . "\0" . 'AppBundle\\Entity\\Payload' . "\0" . 'forced', '' . "\0" . 'AppBundle\\Entity\\Payload' . "\0" . 'baseRef', '' . "\0" . 'AppBundle\\Entity\\Payload' . "\0" . 'compare', '' . "\0" . 'AppBundle\\Entity\\Payload' . "\0" . 'commits'];
        }

        return ['__isInitialized__', '' . "\0" . 'AppBundle\\Entity\\Payload' . "\0" . 'id', '' . "\0" . 'AppBundle\\Entity\\Payload' . "\0" . 'ref', '' . "\0" . 'AppBundle\\Entity\\Payload' . "\0" . 'beforeSha', '' . "\0" . 'AppBundle\\Entity\\Payload' . "\0" . 'afterSha', '' . "\0" . 'AppBundle\\Entity\\Payload' . "\0" . 'created', '' . "\0" . 'AppBundle\\Entity\\Payload' . "\0" . 'deleted', '' . "\0" . 'AppBundle\\Entity\\Payload' . "\0" . 'forced', '' . "\0" . 'AppBundle\\Entity\\Payload' . "\0" . 'baseRef', '' . "\0" . 'AppBundle\\Entity\\Payload' . "\0" . 'compare', '' . "\0" . 'AppBundle\\Entity\\Payload' . "\0" . 'commits'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Payload $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setRef($ref)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRef', [$ref]);

        return parent::setRef($ref);
    }

    /**
     * {@inheritDoc}
     */
    public function getRef()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRef', []);

        return parent::getRef();
    }

    /**
     * {@inheritDoc}
     */
    public function setBeforeSha($beforeSha)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBeforeSha', [$beforeSha]);

        return parent::setBeforeSha($beforeSha);
    }

    /**
     * {@inheritDoc}
     */
    public function getBeforeSha()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBeforeSha', []);

        return parent::getBeforeSha();
    }

    /**
     * {@inheritDoc}
     */
    public function setAfterSha($afterSha)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAfterSha', [$afterSha]);

        return parent::setAfterSha($afterSha);
    }

    /**
     * {@inheritDoc}
     */
    public function getAfterSha()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAfterSha', []);

        return parent::getAfterSha();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreated($created)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreated', [$created]);

        return parent::setCreated($created);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreated()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreated', []);

        return parent::getCreated();
    }

    /**
     * {@inheritDoc}
     */
    public function setDeleted($deleted)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDeleted', [$deleted]);

        return parent::setDeleted($deleted);
    }

    /**
     * {@inheritDoc}
     */
    public function getDeleted()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDeleted', []);

        return parent::getDeleted();
    }

    /**
     * {@inheritDoc}
     */
    public function setForced($forced)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setForced', [$forced]);

        return parent::setForced($forced);
    }

    /**
     * {@inheritDoc}
     */
    public function getForced()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getForced', []);

        return parent::getForced();
    }

    /**
     * {@inheritDoc}
     */
    public function setBaseRef($baseRef)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBaseRef', [$baseRef]);

        return parent::setBaseRef($baseRef);
    }

    /**
     * {@inheritDoc}
     */
    public function getBaseRef()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBaseRef', []);

        return parent::getBaseRef();
    }

    /**
     * {@inheritDoc}
     */
    public function setCompare($compare)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCompare', [$compare]);

        return parent::setCompare($compare);
    }

    /**
     * {@inheritDoc}
     */
    public function getCompare()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCompare', []);

        return parent::getCompare();
    }

}
