<?php

namespace Proxies\__CG__\AppBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Commit extends \AppBundle\Entity\Commit implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'AppBundle\\Entity\\Commit' . "\0" . 'id', '' . "\0" . 'AppBundle\\Entity\\Commit' . "\0" . 'githubId', '' . "\0" . 'AppBundle\\Entity\\Commit' . "\0" . 'treeId', '' . "\0" . 'AppBundle\\Entity\\Commit' . "\0" . 'isDistinct', '' . "\0" . 'AppBundle\\Entity\\Commit' . "\0" . 'message', '' . "\0" . 'AppBundle\\Entity\\Commit' . "\0" . 'timestamp', '' . "\0" . 'AppBundle\\Entity\\Commit' . "\0" . 'url', '' . "\0" . 'AppBundle\\Entity\\Commit' . "\0" . 'payload', '' . "\0" . 'AppBundle\\Entity\\Commit' . "\0" . 'repository', '' . "\0" . 'AppBundle\\Entity\\Commit' . "\0" . 'user', '' . "\0" . 'AppBundle\\Entity\\Commit' . "\0" . 'fileActions'];
        }

        return ['__isInitialized__', '' . "\0" . 'AppBundle\\Entity\\Commit' . "\0" . 'id', '' . "\0" . 'AppBundle\\Entity\\Commit' . "\0" . 'githubId', '' . "\0" . 'AppBundle\\Entity\\Commit' . "\0" . 'treeId', '' . "\0" . 'AppBundle\\Entity\\Commit' . "\0" . 'isDistinct', '' . "\0" . 'AppBundle\\Entity\\Commit' . "\0" . 'message', '' . "\0" . 'AppBundle\\Entity\\Commit' . "\0" . 'timestamp', '' . "\0" . 'AppBundle\\Entity\\Commit' . "\0" . 'url', '' . "\0" . 'AppBundle\\Entity\\Commit' . "\0" . 'payload', '' . "\0" . 'AppBundle\\Entity\\Commit' . "\0" . 'repository', '' . "\0" . 'AppBundle\\Entity\\Commit' . "\0" . 'user', '' . "\0" . 'AppBundle\\Entity\\Commit' . "\0" . 'fileActions'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Commit $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setGithubId($githubId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setGithubId', [$githubId]);

        return parent::setGithubId($githubId);
    }

    /**
     * {@inheritDoc}
     */
    public function getGithubId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getGithubId', []);

        return parent::getGithubId();
    }

    /**
     * {@inheritDoc}
     */
    public function setTreeId($treeId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTreeId', [$treeId]);

        return parent::setTreeId($treeId);
    }

    /**
     * {@inheritDoc}
     */
    public function getTreeId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTreeId', []);

        return parent::getTreeId();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsDistinct($isDistinct)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsDistinct', [$isDistinct]);

        return parent::setIsDistinct($isDistinct);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsDistinct()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsDistinct', []);

        return parent::getIsDistinct();
    }

    /**
     * {@inheritDoc}
     */
    public function setMessage($message)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMessage', [$message]);

        return parent::setMessage($message);
    }

    /**
     * {@inheritDoc}
     */
    public function getMessage()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMessage', []);

        return parent::getMessage();
    }

    /**
     * {@inheritDoc}
     */
    public function setTimestamp($timestamp)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTimestamp', [$timestamp]);

        return parent::setTimestamp($timestamp);
    }

    /**
     * {@inheritDoc}
     */
    public function getTimestamp()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTimestamp', []);

        return parent::getTimestamp();
    }

    /**
     * {@inheritDoc}
     */
    public function setUrl($url)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUrl', [$url]);

        return parent::setUrl($url);
    }

    /**
     * {@inheritDoc}
     */
    public function getUrl()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUrl', []);

        return parent::getUrl();
    }

}
