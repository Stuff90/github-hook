<?php

namespace Proxies\__CG__\AppBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Repository extends \AppBundle\Entity\Repository implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'AppBundle\\Entity\\Repository' . "\0" . 'id', '' . "\0" . 'AppBundle\\Entity\\Repository' . "\0" . 'githubId', '' . "\0" . 'AppBundle\\Entity\\Repository' . "\0" . 'name', '' . "\0" . 'AppBundle\\Entity\\Repository' . "\0" . 'fullName', '' . "\0" . 'AppBundle\\Entity\\Repository' . "\0" . 'owner', '' . "\0" . 'AppBundle\\Entity\\Repository' . "\0" . 'private', '' . "\0" . 'AppBundle\\Entity\\Repository' . "\0" . 'htmlUrl', '' . "\0" . 'AppBundle\\Entity\\Repository' . "\0" . 'description', '' . "\0" . 'AppBundle\\Entity\\Repository' . "\0" . 'fork', '' . "\0" . 'AppBundle\\Entity\\Repository' . "\0" . 'url', '' . "\0" . 'AppBundle\\Entity\\Repository' . "\0" . 'createdAt', '' . "\0" . 'AppBundle\\Entity\\Repository' . "\0" . 'updatedAt', '' . "\0" . 'AppBundle\\Entity\\Repository' . "\0" . 'pushedAt', '' . "\0" . 'AppBundle\\Entity\\Repository' . "\0" . 'gitUrl', '' . "\0" . 'AppBundle\\Entity\\Repository' . "\0" . 'sshUrl', '' . "\0" . 'AppBundle\\Entity\\Repository' . "\0" . 'cloneUrl', '' . "\0" . 'AppBundle\\Entity\\Repository' . "\0" . 'size', '' . "\0" . 'AppBundle\\Entity\\Repository' . "\0" . 'language', '' . "\0" . 'AppBundle\\Entity\\Repository' . "\0" . 'defaultBranch', '' . "\0" . 'AppBundle\\Entity\\Repository' . "\0" . 'masterBranch', '' . "\0" . 'AppBundle\\Entity\\Repository' . "\0" . 'organization', '' . "\0" . 'AppBundle\\Entity\\Repository' . "\0" . 'commits'];
        }

        return ['__isInitialized__', '' . "\0" . 'AppBundle\\Entity\\Repository' . "\0" . 'id', '' . "\0" . 'AppBundle\\Entity\\Repository' . "\0" . 'githubId', '' . "\0" . 'AppBundle\\Entity\\Repository' . "\0" . 'name', '' . "\0" . 'AppBundle\\Entity\\Repository' . "\0" . 'fullName', '' . "\0" . 'AppBundle\\Entity\\Repository' . "\0" . 'owner', '' . "\0" . 'AppBundle\\Entity\\Repository' . "\0" . 'private', '' . "\0" . 'AppBundle\\Entity\\Repository' . "\0" . 'htmlUrl', '' . "\0" . 'AppBundle\\Entity\\Repository' . "\0" . 'description', '' . "\0" . 'AppBundle\\Entity\\Repository' . "\0" . 'fork', '' . "\0" . 'AppBundle\\Entity\\Repository' . "\0" . 'url', '' . "\0" . 'AppBundle\\Entity\\Repository' . "\0" . 'createdAt', '' . "\0" . 'AppBundle\\Entity\\Repository' . "\0" . 'updatedAt', '' . "\0" . 'AppBundle\\Entity\\Repository' . "\0" . 'pushedAt', '' . "\0" . 'AppBundle\\Entity\\Repository' . "\0" . 'gitUrl', '' . "\0" . 'AppBundle\\Entity\\Repository' . "\0" . 'sshUrl', '' . "\0" . 'AppBundle\\Entity\\Repository' . "\0" . 'cloneUrl', '' . "\0" . 'AppBundle\\Entity\\Repository' . "\0" . 'size', '' . "\0" . 'AppBundle\\Entity\\Repository' . "\0" . 'language', '' . "\0" . 'AppBundle\\Entity\\Repository' . "\0" . 'defaultBranch', '' . "\0" . 'AppBundle\\Entity\\Repository' . "\0" . 'masterBranch', '' . "\0" . 'AppBundle\\Entity\\Repository' . "\0" . 'organization', '' . "\0" . 'AppBundle\\Entity\\Repository' . "\0" . 'commits'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Repository $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setGithubId($githubId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setGithubId', [$githubId]);

        return parent::setGithubId($githubId);
    }

    /**
     * {@inheritDoc}
     */
    public function getGithubId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getGithubId', []);

        return parent::getGithubId();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setFullName($fullName)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFullName', [$fullName]);

        return parent::setFullName($fullName);
    }

    /**
     * {@inheritDoc}
     */
    public function getFullName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFullName', []);

        return parent::getFullName();
    }

    /**
     * {@inheritDoc}
     */
    public function setOwner($owner)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOwner', [$owner]);

        return parent::setOwner($owner);
    }

    /**
     * {@inheritDoc}
     */
    public function getOwner()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOwner', []);

        return parent::getOwner();
    }

    /**
     * {@inheritDoc}
     */
    public function setPrivate($private)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPrivate', [$private]);

        return parent::setPrivate($private);
    }

    /**
     * {@inheritDoc}
     */
    public function getPrivate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPrivate', []);

        return parent::getPrivate();
    }

    /**
     * {@inheritDoc}
     */
    public function setHtmlUrl($htmlUrl)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setHtmlUrl', [$htmlUrl]);

        return parent::setHtmlUrl($htmlUrl);
    }

    /**
     * {@inheritDoc}
     */
    public function getHtmlUrl()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHtmlUrl', []);

        return parent::getHtmlUrl();
    }

    /**
     * {@inheritDoc}
     */
    public function setDescription($description)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescription', [$description]);

        return parent::setDescription($description);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescription()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescription', []);

        return parent::getDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function setFork($fork)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFork', [$fork]);

        return parent::setFork($fork);
    }

    /**
     * {@inheritDoc}
     */
    public function getFork()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFork', []);

        return parent::getFork();
    }

    /**
     * {@inheritDoc}
     */
    public function setUrl($url)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUrl', [$url]);

        return parent::setUrl($url);
    }

    /**
     * {@inheritDoc}
     */
    public function getUrl()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUrl', []);

        return parent::getUrl();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedAt($createdAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedAt', [$createdAt]);

        return parent::setCreatedAt($createdAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedAt', []);

        return parent::getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdatedAt($updatedAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedAt', [$updatedAt]);

        return parent::setUpdatedAt($updatedAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedAt', []);

        return parent::getUpdatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setPushedAt($pushedAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPushedAt', [$pushedAt]);

        return parent::setPushedAt($pushedAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getPushedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPushedAt', []);

        return parent::getPushedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setGitUrl($gitUrl)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setGitUrl', [$gitUrl]);

        return parent::setGitUrl($gitUrl);
    }

    /**
     * {@inheritDoc}
     */
    public function getGitUrl()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getGitUrl', []);

        return parent::getGitUrl();
    }

    /**
     * {@inheritDoc}
     */
    public function setSshUrl($sshUrl)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSshUrl', [$sshUrl]);

        return parent::setSshUrl($sshUrl);
    }

    /**
     * {@inheritDoc}
     */
    public function getSshUrl()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSshUrl', []);

        return parent::getSshUrl();
    }

    /**
     * {@inheritDoc}
     */
    public function setCloneUrl($cloneUrl)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCloneUrl', [$cloneUrl]);

        return parent::setCloneUrl($cloneUrl);
    }

    /**
     * {@inheritDoc}
     */
    public function getCloneUrl()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCloneUrl', []);

        return parent::getCloneUrl();
    }

    /**
     * {@inheritDoc}
     */
    public function setSize($size)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSize', [$size]);

        return parent::setSize($size);
    }

    /**
     * {@inheritDoc}
     */
    public function getSize()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSize', []);

        return parent::getSize();
    }

    /**
     * {@inheritDoc}
     */
    public function setLanguage($language)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLanguage', [$language]);

        return parent::setLanguage($language);
    }

    /**
     * {@inheritDoc}
     */
    public function getLanguage()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLanguage', []);

        return parent::getLanguage();
    }

    /**
     * {@inheritDoc}
     */
    public function setDefaultBranch($defaultBranch)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDefaultBranch', [$defaultBranch]);

        return parent::setDefaultBranch($defaultBranch);
    }

    /**
     * {@inheritDoc}
     */
    public function getDefaultBranch()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDefaultBranch', []);

        return parent::getDefaultBranch();
    }

    /**
     * {@inheritDoc}
     */
    public function setMasterBranch($masterBranch)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMasterBranch', [$masterBranch]);

        return parent::setMasterBranch($masterBranch);
    }

    /**
     * {@inheritDoc}
     */
    public function getMasterBranch()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMasterBranch', []);

        return parent::getMasterBranch();
    }

    /**
     * {@inheritDoc}
     */
    public function setOrganization($organization)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOrganization', [$organization]);

        return parent::setOrganization($organization);
    }

    /**
     * {@inheritDoc}
     */
    public function getOrganization()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOrganization', []);

        return parent::getOrganization();
    }

}
