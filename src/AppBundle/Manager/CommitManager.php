<?php

namespace AppBundle\Manager;

use AppBundle\Entity\User;
use AppBundle\Entity\Commit;
use AppBundle\Entity\Payload;
use AppBundle\Entity\FileAction;
use AppBundle\Entity\Repository;
use AppBundle\Manager\FileManager;
use Doctrine\ORM\EntityManagerInterface;

/**
 * UserManager
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CommitManager
{
    private $em;
    private $fileManager;
    private $commitRepository;

    public function __construct( EntityManagerInterface $em , FileManager $fileManager )
    {
        $this->em = $em;
        $this->fileManager = $fileManager;
        $this->commitRepository = $this->em->getRepository('AppBundle:Commit');
        $this->fileActionRepository = $this->em->getRepository('AppBundle:FileAction');
    }


    private function browseFileList( $actionName , $fileListPayload )
    {
        $fileList = array();

        foreach ($fileListPayload as $filePath) {
            $fileList[$filePath] = $actionName;
        }

        return $fileList;
    }


    public function getChangedFilesByActionFromPayload( $commitPayload )
    {
        $changedFilesResult = array();

        if(sizeof($commitPayload->added) > 0 ) {
            $changedFilesResult = array_merge($changedFilesResult , $this->browseFileList( 'added' , $commitPayload->added ));
        }
        if(sizeof($commitPayload->removed) > 0 ) {
            $changedFilesResult = array_merge($changedFilesResult , $this->browseFileList( 'removed' , $commitPayload->removed ));
        }
        if(sizeof($commitPayload->modified) > 0 ) {
            $changedFilesResult = array_merge($changedFilesResult , $this->browseFileList( 'modified' , $commitPayload->modified ));
        }

        return $changedFilesResult;
    }


    public function saveCommitsFromPayload( $commitsPayload , User $user , Repository $repository , Payload $payload  )
    {
        foreach ($commitsPayload as $aCommit) {
            if( null === $commit = $this->commitRepository->findOneByGithubId($aCommit->id)) {

                $commit = new Commit();

                $commit
                    ->setUser($user)
                    ->setPayload($payload)
                    ->setUrl($aCommit->url)
                    ->setGithubId($aCommit->id)
                    ->setRepository($repository)
                    ->setTreeId($aCommit->tree_id)
                    ->setMessage($aCommit->message)
                    ->setIsDistinct($aCommit->distinct)
                    ->setTimestamp($aCommit->timestamp);


                $this->em->persist($commit);
                $this->em->flush();
            }

            foreach ($this->getChangedFilesByActionFromPayload($aCommit) as $filePath => $action) {
                $file = $this->fileManager->getFileFromPayload($filePath);

                $fileActionParameters = array(
                    'action' => $action,
                    'commit' => $commit,
                    'file' => $file
                );

                if( null === $fileAction = $this->fileActionRepository->findOneBy($fileActionParameters)) {

                    $fileAction = new FileAction();

                    $fileAction
                        ->setAction($action)
                        ->setCommit($commit)
                        ->setFile($file);

                    $this->em->persist($fileAction);
                    $this->em->flush();
                }
            }
        }
    }

}
